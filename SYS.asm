ORG 00H
RS BIT P3.0
EN BIT P3.1
IN1 BIT P3.2
IN2 BIT P3.3
IN3 BIT P3.4

MAIN:

ACALL LCD_INIT
;MOV DPTR,#STRING_1
;ACALL DATA_SENT
;ACALL DELAY
;ACALL CLEAR_SCREEN
;MOV DPTR,#STRING_2
;ACALL DATA_SENT
;ACALL DELAY
;ACALL CLEAR_SCREEN
ACALL CHECK
MA:SJMP MA



;INITILIZE LCD
LCD_INIT:
MOV A,#38H
ACALL LCD_COMMAND
ACALL DELAY
MOV A,#0EH
ACALL LCD_COMMAND
ACALL DELAY
RET

DATA_SENT:
CLR A
MOVC A,@A+DPTR
ACALL LCD_DATA
JZ RET1
ACALL DELAY
INC DPTR
SJMP DATA_SENT
RET1:RET

;READ_KEYPRESS:
;MOV R0,#5H   ;COUNTER 5 TIMES ; ENTER 5 LETTERS ONLY
;MOV R1,#50H ;ASSIGN ADDR. LOCATION START FROM 200
;K1:
;ACALL KEY_SCAN
;ACALL LCD_DATA
;MOV @R1,A
;INC R1
;DJNZ R0,K1
;RET

;CHECK_PASSWORD:
;MOV R5,#5H  ;LOOP ON PASSWORD LETTERS
;MOV R1,#50H
;MOV DPTR,#PASSWORD
;M1:CLR A
;MOVC A,@A+DPTR
;XRL A,@R1
;JNZ M2
;INC DPTR
;INC R1
;DJNZ R5,M1
;ACALL PASS_CORRECT
;M2:ACALL PASS_INCORRECT
;RET

CHECK:
M2:
ACALL KEY_SCAN
ACALL LCD_DATA
CJNE A,#31H,M1
ACALL DELAY

ACALL KEY_SCAN
ACALL LCD_DATA
CJNE A,#32H,M1
ACALL DELAY

ACALL KEY_SCAN
ACALL LCD_DATA
CJNE A,#33H,M1
ACALL DELAY

;ACALL KEY_SCAN
;ACALL LCD_DATA
;CJNE A,#34H,M1
;ACALL KEY_SCAN
;ACALL LCD_DATA
;CJNE A,#35H,M1
ACALL PASS_CORRECT
SJMP MA
M1: ACALL PASS_INCORRECT
SJMP MA
;MOV A,
;CJNE A,42D,PASS_INCORRECT
;INC R1
;MOV A,@R1
;CJNE A,49D,PASS_INCORRECT
;INC R1
;MOV A,@R1
;CJNE A,55D,PASS_INCORRECT
;INC R1
;MOV A,@R1
;CJNE A,53D,PASS_INCORRECT
;INC R1
;MOV A,@R1
;CJNE A,66D,PASS_INCORRECT
;ACALL PASS_CORRECT
;RET



PASS_CORRECT:
	SETB IN1
	CLR IN2
	MOV DPTR,#TEXT1
	ACALL DATA_SENT
	ACALL DELAY
	ACALL NEW_LINE
	RET
;MOV DPTR,#SUCCESS
;ACALL DATA_SENT
;ACALL DELAY
PASS_INCORRECT:
	ACALL TIMER
	MOV DPTR,#WRONG
	ACALL DATA_SENT
	ACALL DELAY
	SJMP MA

KEY_SCAN: 
MOV P1,#11111111B
CLR P1.0
JB P1.4,NEXT1
MOV A,#31H ; ASCII CODE FOR 1
RET
     
NEXT1:
JB P1.5,NEXT2
MOV A,#32H
RET       
       
NEXT2:  
JB P1.6,NEXT3
MOV A,#33H
RET
              
NEXT3: 
JB P1.7,NEXT4
MOV A,#41H  ;ASCII CODE FOR A
RET
              
NEXT4:  
SETB P1.0
CLR P1.1
JB P1.4,NEXT5
MOV A,#34H
RET
       
NEXT5:	
JB P1.5,NEXT6
MOV A,#35H
RET    
       
NEXT6:  
JB P1.6,NEXT7
MOV A,#36H
RET          
       
NEXT7: 
JB P1.7,NEXT8
MOV A,#42H
RET          
       
NEXT8:
SETB P1.0
SETB P1.1
CLR P1.2
JB P1.4,NEXT9
MOV A,#37H
RET        
       
NEXT9:
JB P1.5,NEXT10
MOV A,#38H
RET                
       
NEXT10:
JB P1.6,NEXT11
MOV A,#39H
RET 
                       
NEXT11: 
JB P1.7,NEXT12
MOV A,#43H
RET              
                     
NEXT12: 
SETB P1.0
SETB P1.1
SETB P1.2
CLR  P1.3
JB P1.4,NEXT13
MOV A,#2AH
 RET     
       
NEXT13: 
JB P1.5,NEXT14
MOV A,#30H
RET
       
NEXT14:  
JB P1.6,NEXT15	
MOV A,#23H
 RET
                       
NEXT15:
JB P1.7,NEXT16
MOV A,#44H
RET
NEXT16:LJMP KEY_SCAN
            

LCD_COMMAND:
MOV P2,A
CLR RS
SETB EN
ACALL DELAY
CLR EN 	
RET	

LCD_DATA: 
MOV P2,A
SETB RS
SETB EN
ACALL DELAY
CLR EN
RET 

DELAY:
MOV R3,#255
L1:MOV R4,#255
L2:DJNZ R4,L2
DJNZ R3,L1
RET

CLEAR_SCREEN:
MOV A,#01H
ACALL LCD_COMMAND 	
ACALL DELAY
RET
	


NEW_LINE:
MOV A,#0C0H
ACALL LCD_COMMAND 	
ACALL DELAY
RET	
ORG 100H
TEST1: DB "THIS IS PRINT1",0
TEST2: DB "THIS IS PRINT2",0
TEST3: DB "THIS IS PRINT3",0
TEST4: DB "THIS IS PRINT4",0		 	 
STRING_1: DB "DOOR LOCK/UNLOCK",0
STRING_2: DB "ENTER A PASS:",0 
PASSWORD: DB 31H,32H,33H,34H,35H,0 ;PASS = *175B
TEXT1: DB "CORRECT PASSWORD",0
SUCCESS: DB "OPENING DOOR",0
WRONG: DB " INCORRECT PASSWORD",0
;TEXT2 : DB "CLOSING DOOR",0
;ATTEMPT: DB "ATTEMPTS LEFT: ",0 

TIMER:	
	CLR IN3		
	MOV    TMOD,00000101B	;8-bit,rx enable
	MOV    TL0,#0H	;Lower Byte 66H
	MOV    TH0,#0H	;Upper Byte OFCH
	SETB   TR0		;Run timer

	RUNNING:JNB TF0, RUNNING ;JMP IF BIT NOT SET
	CLR TR0 ; STOP TIMER 0
	CLR TF0 ; CLEAR OVERFLOW FLAG
	SETB IN3	
	RET
		
END	  
       	
